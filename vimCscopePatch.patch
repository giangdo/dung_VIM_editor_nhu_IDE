diff --git a/runtime/doc/if_cscop.txt b/runtime/doc/if_cscop.txt
index d8dc48f..f7cfe4e 100644
--- a/runtime/doc/if_cscop.txt
+++ b/runtime/doc/if_cscop.txt
@@ -256,13 +256,19 @@ started will have no effect!
 'cscopequickfix' specifies whether to use quickfix window to show cscope
 results.  This is a list of comma-separated values. Each item consists of
 |cscope-find| command (s, g, d, c, t, e, f or i) and flag (+, - or 0).
-'+' indicates that results must be appended to quickfix window,
-'-' implies previous results clearance, '0' or command absence - don't use
-quickfix.  Search is performed from start until first command occurrence.
-The default value is "" (don't use quickfix anyway).  The following value
-seems to be useful: >
+'+' and '-' flags may be followed by optional '!'
+    '+' flag will make cscope append its results to the quickfix window
+    '-' means that results will overwrite previous data
+    '0' or command absence - don't use quickfix
+With '!', cscope will not jump to the first location like |:make|!
+Search is performed from start until first command occurrence.
+The default value is "" (don't use quickfix). The following value
+seems useful enough: >
 	:set cscopequickfix=s-,c-,d-,i-,t-,e-
 <
+Example below will prevent 's' search from jumping to the first location: >
+	:set cscopequickfix=s-!,c-,t0
+
 							*cscopetag* *cst*
 If 'cscopetag' is set, the commands ":tag" and CTRL-] as well as "vim -t"
 will always use |:cstag| instead of the default :tag behavior.  Effectively,
@@ -453,6 +459,19 @@ Cscope Home Page (http://cscope.sourceforge.net/): >
 		\:vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
 	nmap <C-Space><C-Space>d
 		\:vert scs find d <C-R>=expand("<cword>")<CR><CR>
+Another option would be an interactive mapping like: >
+	function! MyCsFind(split)
+	    echo 'Cscope find (c-callers,d-callees,e-grep,f-file,g-def,' .
+		\'i-incl,s-sym,t-assign): '
+	    let cmd = getchar()
+	    exec (a:split ? 'scs' : 'cs') . ' find ' . nr2char(cmd) . ' ' . 
+		\expand(cmd == 'i' || cmd == 'f' ? '<cfile>' : '<cword>')
+	endfunction
+
+	" ask for search command and use word under cursor
+	nmap <Leader>cc :call MyCsFind(0)<CR>
+	" the same plus splitting the window
+	nmap <Leader>cs :call MyCsFind(1)<CR>
 
 ==============================================================================
 7. Cscope availability and information			*cscope-info*
diff --git a/src/if_cscope.c b/src/if_cscope.c
index 4c3e2bd..dbae6e6 100644
--- a/src/if_cscope.c
+++ b/src/if_cscope.c
@@ -1310,7 +1310,8 @@ cs_find_common(opt, pat, forceit, verbose, use_ll, cmdline)
 		     */
 		    qi = (bt_quickfix(wp->w_buffer) && wp->w_llist_ref != NULL)
 			?  wp->w_llist_ref : wp->w_llist;
-		qf_jump(qi, 0, 0, forceit);
+		if (qfpos[1] != '!')
+			qf_jump(qi, 0, 0, forceit);
 	    }
 	}
 	mch_remove(tmp);
diff --git a/src/option.c b/src/option.c
index 7c9f9c8..4623da8 100644
--- a/src/option.c
+++ b/src/option.c
@@ -7142,18 +7142,42 @@ did_set_string_option(opt_idx, varp, new_value_alloced, oldval, errbuf,
 	    p = p_csqf;
 	    while (*p != NUL)
 	    {
-		if (vim_strchr((char_u *)CSQF_CMDS, *p) == NULL
-			|| p[1] == NUL
-			|| vim_strchr((char_u *)CSQF_FLAGS, p[1]) == NULL
-			|| (p[2] != NUL && p[2] != ','))
+	        int ok = FALSE;
+	        if (vim_strchr((char_u *)CSQF_CMDS, *p) != NULL
+	            && p[1] != NUL
+	            && vim_strchr((char_u *)CSQF_FLAGS, p[1]) != NULL)
+	        {
+	            switch (p[2])
+	            {
+	            case NUL:
+	                p += 2;
+	                ok = TRUE;
+	                break;
+	            case ',':
+	                p += 3;
+	                ok = TRUE;
+	                break;
+	            case '!':
+	                if (p[1] == '0')
+	                    break;
+	                if (p[3] == NUL)
+	                {
+	                    p += 3;
+	                    ok = TRUE;
+	                }
+	                else if (p[3] == ',')
+	                {
+	                    p += 4;
+	                    ok = TRUE;
+	                }
+	                break;
+	            }
+	        }
+	        if (!ok)
 	        {
-		    errmsg = e_invarg;
-		    break;
-		}
-		else if (p[2] == NUL)
-		    break;
-		else
-		    p += 3;
+	            errmsg = e_invarg;
+	            break;
+	        }
 	    }
 	}
     }
